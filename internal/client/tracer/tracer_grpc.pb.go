// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: tracer.proto

package tracer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tracer_InsertEvent_FullMethodName = "/Tracer/InsertEvent"
	Tracer_InsertLog_FullMethodName   = "/Tracer/InsertLog"
)

// TracerClient is the client API for Tracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TracerClient interface {
	InsertEvent(ctx context.Context, in *Events, opts ...grpc.CallOption) (*TracerEmpty, error)
	InsertLog(ctx context.Context, in *Logs, opts ...grpc.CallOption) (*TracerEmpty, error)
}

type tracerClient struct {
	cc grpc.ClientConnInterface
}

func NewTracerClient(cc grpc.ClientConnInterface) TracerClient {
	return &tracerClient{cc}
}

func (c *tracerClient) InsertEvent(ctx context.Context, in *Events, opts ...grpc.CallOption) (*TracerEmpty, error) {
	out := new(TracerEmpty)
	err := c.cc.Invoke(ctx, Tracer_InsertEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracerClient) InsertLog(ctx context.Context, in *Logs, opts ...grpc.CallOption) (*TracerEmpty, error) {
	out := new(TracerEmpty)
	err := c.cc.Invoke(ctx, Tracer_InsertLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracerServer is the server API for Tracer service.
// All implementations must embed UnimplementedTracerServer
// for forward compatibility
type TracerServer interface {
	InsertEvent(context.Context, *Events) (*TracerEmpty, error)
	InsertLog(context.Context, *Logs) (*TracerEmpty, error)
	mustEmbedUnimplementedTracerServer()
}

// UnimplementedTracerServer must be embedded to have forward compatible implementations.
type UnimplementedTracerServer struct {
}

func (UnimplementedTracerServer) InsertEvent(context.Context, *Events) (*TracerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (UnimplementedTracerServer) InsertLog(context.Context, *Logs) (*TracerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLog not implemented")
}
func (UnimplementedTracerServer) mustEmbedUnimplementedTracerServer() {}

// UnsafeTracerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TracerServer will
// result in compilation errors.
type UnsafeTracerServer interface {
	mustEmbedUnimplementedTracerServer()
}

func RegisterTracerServer(s grpc.ServiceRegistrar, srv TracerServer) {
	s.RegisterService(&Tracer_ServiceDesc, srv)
}

func _Tracer_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracerServer).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracer_InsertEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracerServer).InsertEvent(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracer_InsertLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Logs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracerServer).InsertLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracer_InsertLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracerServer).InsertLog(ctx, req.(*Logs))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracer_ServiceDesc is the grpc.ServiceDesc for Tracer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tracer",
	HandlerType: (*TracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEvent",
			Handler:    _Tracer_InsertEvent_Handler,
		},
		{
			MethodName: "InsertLog",
			Handler:    _Tracer_InsertLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracer.proto",
}
